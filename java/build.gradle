buildscript {
    repositories {
      maven { url 'https://plugins.gradle.org/m2/' }
    }
  dependencies {
    classpath 'com.netflix.nebula:gradle-ospackage-plugin:4.3.0'
  }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'nebula.ospackage-application'
apply plugin: 'maven'

group = 'ai.swim'
description = "Illustrate basic Swim concepts- ValueLane, MapLane, CommandLane, Recon and Java Objects"
//version = project.property('swim.version')
sourceCompatibility = 1.8
def configFile = 'raspi'

repositories {
  mavenCentral()
  maven {
    url 'https://repo.swim.it/swim-public/'
  }
}

dependencies {
  compile 'ai.swim:swim-server-client:1.2.0.20180531204107'
  compile group: 'com.fazecast', name: 'jSerialComm', version: '2.0.2'
}


configurations.all {
  resolutionStrategy {
    cacheChangingModulesFor 3600, 'seconds'
  }
}

configurations {
  testCompile.exclude group: 'ai.swim:swim-server'
}

compileJava {
  options.compilerArgs += ['-Xlint']
}

task runMain(type: JavaExec) {
  main = mainClassName
  systemProperties System.properties
  if (project.hasProperty('config')) {
      hostname = config
  }
}

task buoy(type: Jar) {
  from("${buildDir}/resources/main/${project.name}.recon") {
    rename { String fileName -> fileName.replace("${project.name}.recon", "buoy.recon") }
  }
  from("${buildDir}/libs/${project.name}-${project.version}.jar") {
    into("SWIM-INF/libs")
  }
  from("${buildDir}/../../util/build/libs/util-${project.version}.jar") {
    into("SWIM-INF/libs")
  }
  extension "buoy"
}

javadoc {
  options.charSet = 'UTF-8'
}

mainClassName = 'ai.swim.Main'
applicationDefaultJvmArgs = ["-Dapp.config="+projectDir.parent+"/config/java/"+hostname+"-app.properties", "-Dcom.sun.management.jmxremote.port=3333", "-Dcom.sun.management.jmxremote.ssl=false", "-Dcom.sun.management.jmxremote.authenticate=false", "-Dcom.sun.management.jmxremote.local.only=false", "-Dcom.sun.management.jmxremote.port=1098", "-Djava.rmi.server.hostname=192.168.0.100"]
