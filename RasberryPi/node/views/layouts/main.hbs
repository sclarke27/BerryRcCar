<html>
<head>
	<title>Berry Rc Car</title>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
	<link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Open+Sans:600|Droid+Sans+Mono|Ovo" type="text/css">
	<link href="https://fonts.googleapis.com/css?family=Alegreya+Sans+SC|Exo" rel="stylesheet">
	<style>
		* {
		  padding: 0px;
		  margin: 0px;
		}
		body {
		  background-color: black;
		  color: white;
		  font-family: arial;
		  font-size: 1.3rem;
		  display: flex;
		  flex-direction: row;
		  flex-wrap: wrap;
		  font-family: 'Exo', sans-serif;

		}
		h3 {
		  background-color: rgba(50, 50, 200, 0.5);
		  margin-top: 10px;
		}
		.wrapper, .wrapper-wide {
		  padding: 20px;
		  flex-shrink: 0;
		}
		.wrapper {
		  width: 220px;
		}
		.wrapper-wide {
		  width: 420px;
		}
		input, select {
		  color: white;
		  background-color: #0C0C0C;
		  border: 0px;
		  padding: 5px;
		  margin: 10px;
		  width: 100%;
		  font-size: 1.3rem;
		  box-shadow: 0px 0px 5px rgba(100, 100, 255, .5);
		}
		td input {
		  border-radius: 50%;
		  width: 50px;
		  height: 50px;
		  line-height: 30px;
		  font-size: 32px;
		}
		input[type=range] {
		  margin: 0px 0px 5px 0px;
		  box-shadow: none;
		}
		.compass {
		  width: 200px;
		  height: 200px;
		  padding: 0px;
		}
		.compassCircle {
		  width: 95%;
		  height: 95%;
		  border-radius: 50%;
		  border: 1px solid white;
		  color: white;
		  text-align: center;
		  padding: 0px;
		  transition: all 0.1s linear;
		  font-size: 42px;
		  box-shadow: 0 0 1px 0px rgba(255, 255, 255, 0.5) inset, 0 0 1px 0px rgba(255, 255, 255, 0.5);
		  background-color: rgba(100, 100, 255, 0.5);
		}
		.compassLabel {
			position: absolute;
			top: 47%;
			left: 48%;
			transform: translateX(-50%) translateY(-50%);
			text-align: center;
		}
		.carOverhead {
		  position: relative;
		  width: 170px;
		  height: 270px;
		  margin: 0px auto;
		}
		.carWheels {
		  border: solid 1px;
		  border-color: red;
		  width: 25px;
		  height: 55px;
		  position: absolute;
		  transition: all 0.1s linear;
		}
		.carFrame {
		  border: solid 1px blue;
		}
		#frontAxle, #backAxle {
		  position: absolute;
		  width: 122px;
		  height: 10px;
		  left: 22px;
		}
		#frontAxle {
		  top: 32px;
		}
		#backAxle {
		  top: 222px;
		}
		#centerAxle {
		  position: absolute;
		  width: 10px;
		  height: 200px;
		  left: 77px;
		  top: 32px;
		}
		#leftFrontWheel {
		  top: 10px;
		  left: 10px;
		}
		#rightFrontWheel {
		  top: 10px;
		  right: 10px;
		}
		#leftBackWheel {
		  bottom: 10px;
		  left: 10px;
		}
		#rightBackWheel {
		  right: 10px;
		  bottom: 10px;
		}
		
		.instPanel {
			margin: 20px;
			border-radius: 27px;
			display: inline-block;
			overflow: hidden;
			background: linear-gradient(to bottom, rgba(184,225,252,0.72) 0%,rgba(169,210,243,0.72) 10%,rgba(144,186,228,1) 25%,rgba(144,188,234,1) 37%,rgba(144,191,240,1) 50%,rgba(107,168,229,1) 51%,rgba(162,218,245,1) 83%,rgba(189,243,253,1) 100%);
		}
		.instPanel h1 {
			font-size: 18px;
			padding: 10px 20px;
			font-family: 'Alegreya Sans SC', sans-serif;
			letter-spacing: 0.7px;
		}
		.instRow {
			display: flex;
			position: relative;
			margin: 10px 10px 20px 10px;
		}
		.thermWrapper {
			display: flex;
			position: relative;
			width: 90px;
		}
		.titleLabel {
			position: absolute;
			left: 0px;
			writing-mode: tb-rl;
			border-bottom: solid 1px;
			border-left: solid 1px;
			border-top: solid 1px;
			box-shadow: 0 0 1px 0px rgba(255, 255, 255, 0.5) inset, 0 0 1px 0px rgba(255, 255, 255, 0.5);
			padding: 8px 2px 25px 5px;
			border-radius: 25px 0 0 45px;
			font-size: 12px;
			text-transform: uppercase;
			letter-spacing: 1.7px;
			background-color: rgba(27, 27, 27, 0.27);
			
		}
		.thermOutside {
			position: absolute;
			left: 32px;
			width: 45px;
			height: 200px;
			border: solid 1px white;
			box-shadow: 0 0 6px 0px rgba(0, 0, 0, 0.5) inset, 0 0 1px 0px rgba(255, 255, 255, 0.5);
			border-radius: 0 7px 7px 7px; 
			position: relative;
			background-color: rgba(200, 200, 200, 0.72);
			margin-right: 5px;
			overflow: hidden;
		}
		.thermInside {
			width: 100%;
			height: 50%;
			position: absolute;
			bottom: 0px;
			border-radius: 0 0 7px 7px; 
			box-shadow: inset 0px 0 15px rgba(0, 0, 0, 0.27);
			transition: height 50ms linear;
		}
		.thermInside label {
			position: absolute;
			margin: 3px auto;
			color: white;
			font-size: 10px;
			text-align: center;
			width:100%;
			font-family: 'Droid Sans Mono', monospace;
			text-shadow: 0px 0px 3px black;
		}		
	</style>	
	<script>
		class CompassControl {
			constructor(mainTitle, minValue, maxValue, currentValue, targetElement) {
				this._mainTitle = mainTitle;
				this._minValue = minValue;
				this._maxValue = maxValue;
				this._currentValue = currentValue;
				this._targetElement = targetElement;
				this._mainElem = null;
				this._compassCircleElem = null;
				this._dataLabelElem = null;
			}
			
			show() {
				this._mainElem = document.createElement('div');
				this._mainElem.className = 'compass';
				
				this._compassCircleElem = document.createElement('div');
				this._compassCircleElem.className = 'compassCircle';
				this._compassCircleElem.innerText = '^';
				this._mainElem.appendChild(this._compassCircleElem);
				
				this._dataLabelElem = document.createElement('span');
				this._dataLabelElem.className = "compassLabel";
				this._mainElem.appendChild(this._dataLabelElem);
				
				this._targetElement.appendChild(this._mainElem);
				this.update(this._currentValue);
			}
			
			update(currentValue) {
				if(currentValue === this._currentValue) return;
				this._currentValue = currentValue;
				this._dataLabelElem.innerText = this._currentValue;
				this._compassCircleElem.style.transform = `rotate(${this._currentValue}deg)`;
			}
		}
	
		class InstrumentPanel {
			constructor(panelData, targetElementId) {
				this._mainTitle = panelData.title;
				this._dataItems = panelData.dataItems;
				this._headerBgColor = panelData.headerBgColor || "";
				this._targetElementId = targetElementId;
				this._panelMainElem = null;
				this._panelTitleElem = null;
				this._panelInstRow = null;
			}
			
			show(sensorData) {
				this._targetElement = document.getElementById(this._targetElementId)
				
				this._panelMainElem = document.createElement('span');
				this._panelMainElem.className = 'instPanel';
				
				this._panelTitleElem = document.createElement('h1');
				this._panelTitleElem.innerText = this._mainTitle;
				this._panelTitleElem.style.backgroundColor = this._headerBgColor;//"rgba(42,42,227,0.27)";
				this._panelMainElem.appendChild(this._panelTitleElem);
				
				this._panelInstRow = document.createElement('div');
				this._panelInstRow.className = "instRow";
				this._panelMainElem.appendChild(this._panelInstRow);
				
				for(const dataItem of this._dataItems) {
					dataItem.control = new dataItem.controlClass(dataItem.title, sensorData[dataItem.sensorKey].min, sensorData[dataItem.sensorKey].max, sensorData[dataItem.sensorKey].current, this._panelInstRow);
					dataItem.control.show();
				}
				
				this._targetElement.appendChild(this._panelMainElem);
			}
			
			update(sensorData) {
				for(const dataItem of this._dataItems) {
					if(dataItem.control) {
						dataItem.control.update(sensorData[dataItem.sensorKey].current);
					}
				}
			}
			
		}
		
		class ThermometerControl {
		
			constructor(mainTitle, minValue, maxValue, currentValue, targetElement) {
				// data values
				this._mainTitleValue = mainTitle;
				this._minValue = minValue;
				this._maxValue = maxValue;
				this._currentValue = currentValue;
				// html elements
				this._targetElement = targetElement;
				this._mainWrapperElem = null;
				this._mainTitleElem = null;
				this._outerSliderElem = null;
				this._innerSliderElem = null;
				this._dataLabelElem = null;
				
			}
			
			show() {
				this._mainWrapperElem = document.createElement('div');
				this._mainWrapperElem.className = 'thermWrapper';
				
				this._mainTitleElem = document.createElement('div');
				this._mainTitleElem.className = 'titleLabel';
				this._mainTitleElem.innerText = this._mainTitleValue;
				this._mainWrapperElem.appendChild(this._mainTitleElem);
				
				this._outerSliderElem = document.createElement('div');
				this._outerSliderElem.className = 'thermOutside';
				
				this._innerSliderElem = document.createElement('div');
				this._innerSliderElem.className = 'thermInside';
				
				this._dataLabelElem = document.createElement('label');
				this._dataLabelElem.innerText = this._currentValue;
				
				this._innerSliderElem.appendChild(this._dataLabelElem);
				this._outerSliderElem.appendChild(this._innerSliderElem);
				this._mainWrapperElem.appendChild(this._outerSliderElem);
				
				this._targetElement.appendChild(this._mainWrapperElem);
			}
			
			update(currentValue) {
				if(Number(currentValue).toPrecision(4) === this._currentValue) return;
				this._currentValue = Number(currentValue).toPrecision(4);

				const valuePercent = this._currentValue / this._maxValue * 100;
				
				this._innerSliderElem.style.height = `${valuePercent}%`;
				const newBgColor = `hsla(${valuePercent}, 100%, 50%, 0.8)`;
				this._innerSliderElem.style.backgroundColor = newBgColor;
				this._dataLabelElem.innerHTML = `${this._currentValue}`;
				if(this._mainTitleElem.innerText === this._mainTitleValue) {
					this._mainTitleElem.innerText = this._mainTitleValue
				}
				
			}
		
		}	
	</script>
</head>
<body>



 {{{body}}}


</body>
</html>
