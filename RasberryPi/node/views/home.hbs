	<script>
		let _botActions = null;

		function handleSlider(channel, value) {
		  setSensorValue(channel, value);
		}

		function updateIntent(formObj) {
		  setIntent(formObj['intent'].options[formObj['intent'].selectedIndex].value);
		  return false;
		}
		function setIntent(newIntentString) {
		  console.error(newIntentString)
		  var opts = {
			method: 'POST',
			body: 'json',
			headers: {}
		  };
		  fetch(`/intent/${newIntentString}`, opts)
		  .then(function (response) {
			return response.json();
		  })

		}
		function resetSensors() {
		  var opts = {
			method: 'POST',
			body: 'json',
			headers: {}
		  };
		  fetch(`/resetSensors`, opts)
		  .then(function (response) {
			return response.json();
		  })

		}
		function setMovementState(throttle, steering) {
		  setSensorValue('throttleRadio', throttle);
		  setSensorValue('steeringRadio', steering);
		}
		function updateCompass(deg) {
		  document.getElementById('compassCircle').style.transform = `rotate(${deg}deg)`;
		}
		function senSensorValueFromForm(formObj) {
		  const channel = formObj['channel'].options[formObj['channel'].selectedIndex].value;
		  const newValue = Number(formObj['newValue'].value);
		  setSensorValue(channel, newValue);
		}
		function setSensorValue(channel, newValue) {
		  var opts = {
			method: 'POST',
			body: 'json',
			headers: {}
		  };
		  fetch(`/sensor/${channel}-${newValue}`, opts)
		  .then(function (response) {
			return response.json();
		  })
		  .then(function (body) {
			return;
		  });

		  return false;
		}
		let lastPercent = 0;
		function updateCarWheels(sensorData) {
		  const currValue = sensorData.steeringRadio.current;
		  const currMax = sensorData.steeringRadio.max;

		  const currPercent = (currValue * ((currValue < 0) ? -1 : 1)) / 100;
		  const turnValue = 42 * currPercent * ((currValue < 0) ? -1 : 1);

		 if(lastPercent !== currPercent) {
			document.getElementById('leftFrontWheel').style.transform = `rotate(${turnValue}deg)`;
			document.getElementById('rightFrontWheel').style.transform = `rotate(${turnValue}deg)`;
			lastPercent = currPercent;
		  }

		  if(sensorData.throttleRadio.current < -5 || sensorData.throttleRadio.current > 5) {
			document.getElementById('leftFrontWheel').style.borderColor = (sensorData.throttleRadio.current >= 5) ? 'green' : 'orange';
			document.getElementById('rightFrontWheel').style.borderColor = (sensorData.throttleRadio.current >= 5) ? 'green' : 'orange';
			document.getElementById('leftBackWheel').style.borderColor = (sensorData.throttleRadio.current >= 5) ? 'green' : 'orange';
			document.getElementById('rightBackWheel').style.borderColor = (sensorData.throttleRadio.current >= 5) ? 'green' : 'orange';
		  } else {
			document.getElementById('leftFrontWheel').style.borderColor = 'red';
			document.getElementById('rightFrontWheel').style.borderColor = 'red';
			document.getElementById('leftBackWheel').style.borderColor = 'red';
			document.getElementById('rightBackWheel').style.borderColor = 'red';
		  }
		}
		function getStatus() {
		  var opts = {
			method: 'POST',
			body: 'json',
			headers: {}
		  };
		  fetch(`/status`, opts)
		  .then(function (response) {
			return response.json();
		  })
		  .then(function (returnData) {
			const dataDiv = document.getElementById('botData');
			const sensorData = returnData.data;
			const sensorKeys = Object.keys(sensorData);
			const statusData = returnData.status;
			const statusKeys = Object.keys(statusData);

			updateCompass(sensorData.compass1.current);
			updateCarWheels(sensorData);
			updateTherm(sensorData);
			updateCpuTherm(sensorData);
			let newDivStr = '<h3>Sensors</h3>';
			for (const key of sensorKeys) {
				if(key.indexOf('Dist') >= 0) {
					newDivStr += `<span style="color:${(((sensorData[key].current) < 1200) ? 'red' : 'green')}"><i>${key}</i>: ${((sensorData[key].current * 0.0133 / 2).toPrecision(4))} in.</span><br>`
				} else {
					newDivStr += `<span><i>${key}</i>: ${sensorData[key].current}</span><br>`
				}
			  document.getElementById(`${key}Range`).value = sensorData[key].current;
			}
			newDivStr += '<h3>Status</h3>';
			for (const key of statusKeys) {
				const currDataset = statusData[key];
				newDivStr += `<span><b>${key}</b><br>`
				for(const subkey of Object.keys(currDataset)) {
					if(subkey.indexOf('Time') >= 0) {
						const uptime = moment(currDataset[subkey]).fromNow(true)
						newDivStr += `<span><i>${subkey}</i>: ${uptime}</span><br>`
					} else {
						newDivStr += `<span><i>${subkey}</i>: ${currDataset[subkey]}</span><br>`
					}
				}
				newDivStr += `</span><br>`
			}
			dataDiv.innerHTML = newDivStr;
			return;
		  });

		}
		setInterval(getStatus, 2);
	</script>	
	
	
  <div class="wrapper">
    <table>
      <tr>
        <td><input type='button' value="^" onclick="setMovementState(-200, -200)" style="transform: rotate(-45deg)"></td>
        <td><input type='button' value="^" onclick="setMovementState(-200, 0)"></td>
        <td><input type='button' value="^" onclick="setMovementState(-200, 200)" style="transform: rotate(45deg)"></td>
      </tr>
      <tr>
        <td><input type='button' value="<" onclick="setMovementState(0, -200)"></td>
        <td><input type='button' value="o" onclick="setMovementState(0, 0)"></td>
        <td><input type='button' value=">" onclick="setMovementState(0, 200)"></td>
      </tr>
      <tr>
        <td><input type='button' value="^" onclick="setMovementState(200, -200)" style="transform: rotate(-125deg)"></td>
        <td><input type='button' value="^" onclick="setMovementState(200, 0)" style="transform: rotateX(180deg);"></td>
        <td><input type='button' value="^" onclick="setMovementState(200, 200)" style="transform: rotate(125deg)"></td>
      </tr>
    </table>
    <input type="button" value="All Stop" onclick="setIntent('idle')">
	{{#each intents}}
		<input type="button" value="{{this.name}}" onclick="setIntent('{{@key}}')">
	{{/each}}
	<style>
		.thermOutside, .cpuThermOutside {
			width: 45px;
			height: 200px;
			border: solid 1px white;
			border-radius: 45px;
			position: relative;
			background-color: rgba(200, 200, 200, 0.3);
			margin-right: 5px;
		}
		#thermInside, #cpuThermInside {
			width: 100%;
			height: 50%;
			position: absolute;
			background-color: rgba(255, 42, 42, 0.7);
			bottom: 0px;
			border-radius: 0 0 45px 45px;
			box-shadow: inset 0px 0 15px rgba(255, 255, 255, 0.5);
		}
		#thermInside label, #cpuThermInside label {
			position: absolute;
			margin: 3px auto;
			color: white;
			font-size: 10px;
			text-align: center;
			width:100%;
		}
	</style>
	<script>
		function updateTherm(sensorData) {
			const temp1 = sensorData.tempurature.current;
			const temp2 = sensorData.tempurature2.current;
			const tempMax = sensorData.tempurature2.max;
			const avgTemp = ((Number(temp1) + Number(temp2)) / 2).toPrecision(4);
			const tempPercent = avgTemp / tempMax * 100;
			const innerTherm = document.getElementById('thermInside');
			const thermLabel = document.getElementById('thermLabel');
			innerTherm.style.height = `${tempPercent}%`;
			thermLabel.innerHTML = `${avgTemp}&deg;`;
		}
		function updateCpuTherm(sensorData) {
			const temp1 = (Number(sensorData.cpuTemp.current) * 9 / 5 + 32).toPrecision(4);
			const tempMax = sensorData.cpuTemp.max;
			const tempPercent = temp1 / tempMax * 100;
			const innerTherm = document.getElementById('cpuThermInside');
			const thermLabel = document.getElementById('cpuThermLabel');
			innerTherm.style.height = `${tempPercent}%`;
			thermLabel.innerHTML = `${temp1}&deg;`;
		}
	</script>
	<div style="display: flex">
	<div class="thermOutside">
		<div id="thermInside">
			<label id="thermLabel">100&deg;</label>
		</div>
	</div>
	<div class="cpuThermOutside">
		<div id="cpuThermInside">
			<label id="cpuThermLabel">100&deg;</label>
		</div>
	</div>
	</div>
	<div id="compass">
		<div id="compassCircle">^</div>
		<div class="carOverhead">
			<div class="carWheels" id="leftFrontWheel"></div>
			<div class="carWheels" id="rightFrontWheel"></div>
			<div class="carWheels" id="leftBackWheel"></div>
			<div class="carWheels" id="rightBackWheel"></div>
			<div class="carFrame" id="frontAxle"></div>
			<div class="carFrame" id="backAxle"></div>
			<div class="carFrame" id="centerAxle"></div>
		</div>
	</div>
  </div>
  <div class="wrapper-wide">
    <h3>Sensor Input</h3>
    <form method="get" onsubmit="return false">
      {{#each sensors as |value key|}}
        <label>{{key}}</lable>
        <input type="range" id="{{key}}Range" value="{{value.current}}" min="{{value.min}}" max="{{value.max}}" name="{{key}}" oninput="handleSlider(this.name, this.value)">
      {{/each}}
      <input type="button" value="Zero Sensors" onclick="resetSensors()">
    </form>
  </div>
  <div class="wrapper-wide">
    <span id="botData"></span>
  </div>
